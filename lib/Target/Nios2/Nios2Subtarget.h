//===-- Nios2Subtarget.h - Define Subtarget for the Nios2 ---------*- C++ -*-===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
//
// This file declares the Nios2 specific subclass of TargetSubtargetInfo.
//
//===----------------------------------------------------------------------===//

#ifndef LLVM_LIB_TARGET_NIOS2_NIOS2SUBTARGET_H
#define LLVM_LIB_TARGET_NIOS2_NIOS2SUBTARGET_H

#include "Nios2FrameLowering.h"
#include "Nios2InstrInfo.h"
#include "Nios2ISelLowering.h"
#include "llvm/ADT/Triple.h"
#include "llvm/IR/DataLayout.h"
#include "llvm/MC/MCInstrItineraries.h"
#include "llvm/Target/TargetSubtargetInfo.h"
#include <string>

#define GET_SUBTARGETINFO_HEADER
#include "Nios2GenSubtargetInfo.inc"

namespace llvm {
class Nios2RegisterInfo;
class StringRef;
class TargetOptions;

class Nios2Subtarget : public Nios2GenSubtargetInfo {
public:
  // NOTE: O64 will not be supported.
  enum Nios2ABIEnum {
    UnknownABI, O32, N32, N64, EABI
  };

protected:

  enum Nios2ArchEnum {
    Nios2Std
  };

  // Nios2 architecture version
  Nios2ArchEnum Nios2ArchVersion;

  // Nios2 supported ABIs
  Nios2ABIEnum Nios2ABI;

  // IsLittle - The target is Little Endian
  bool IsLittle;

  // isLinux - Target system is Linux. Is false we consider ELFOS for now.
  bool IsLinux;

  // UseSmallSection - Small section is used.
  bool UseSmallSection;

  // Features
  bool HasHWMul;
  bool HasHWDiv;

  InstrItineraryData InstrItins;

  /// TargetTriple - What processor and OS we're targeting.
  Triple TargetTriple;

private:
  void initializeEnvironment();
  void resetSubtargetFeatures(StringRef CPU, StringRef FS);

public:
  /// This constructor initializes the data members to match that
  /// of the specified triple.
  Nios2Subtarget(const Triple &TT, const std::string &CPU,
                 const std::string &FS, const Nios2TargetMachine &TM);

  /// ParseSubtargetFeatures - Parses features string setting specified
  /// subtarget options.  Definition of function is auto generated by tblgen.
  void ParseSubtargetFeatures(StringRef CPU, StringRef FS);

  /// \brief Reset the features for the Nios2 target.
  virtual void resetSubtargetFeatures(const MachineFunction *MF);

  /// This overrides the PostRAScheduler bit in the SchedModel for each CPU.
  bool enablePostRAScheduler() const override;
  void getCriticalPathRCs(RegClassVector &CriticalPathRCs) const override;
  CodeGenOpt::Level getOptLevelToEnablePostRAScheduler() const override;

  unsigned getTargetABI() const { return Nios2ABI; }

  bool isLittle() const { return IsLittle; }
  bool isLinux() const { return IsLinux; }
  bool useSmallSection() const { return UseSmallSection; }

  // Specific features
  bool hasHWMul() const { return HasHWMul; }
  bool hasHWDiv() const { return HasHWDiv; }

  const Triple &getTargetTriple() const { return TargetTriple; }

  const TargetFrameLowering *getFrameLowering() const override {
    return &FrameLowering;
  }
  const Nios2InstrInfo *getInstrInfo() const override { return &InstrInfo; }
  const Nios2TargetLowering *getTargetLowering() const override {
    return &TLInfo;
  }
  const Nios2RegisterInfo *getRegisterInfo() const override {
    return &getInstrInfo()->getRegisterInfo();
  }

private:

  Nios2FrameLowering FrameLowering;
  Nios2InstrInfo InstrInfo;
  Nios2TargetLowering TLInfo;
};
} // End llvm namespace

#endif
